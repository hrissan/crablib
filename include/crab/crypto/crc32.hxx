// Copyright (c) 2007-2020, Grigory Buteyko aka Hrissan
// Licensed under the MIT License. See LICENSE for details.

#include "crc32.hpp"

#define USE_HW_INSTRUCTIONS 0  // Experimental, improves speed of API server by < 5%. Requires sse4.2 architecture in CMakeLists.txt

#if USE_HW_INSTRUCTIONS
#include <immintrin.h>
#endif

namespace crab {

uint32_t crc32(uint32_t crc, const uint8_t *data, size_t size) {
	static const uint32_t crc_table[256] = {0x00000000U, 0x77073096U, 0xee0e612CU, 0x990951BAU, 0x076DC419U, 0x706AF48FU, 0xe963A535U,
	    0x9e6495A3U, 0x0eDB8832U, 0x79DCB8A4U, 0xe0D5e91eU, 0x97D2D988U, 0x09B64C2BU, 0x7eB17CBDU, 0xe7B82D07U, 0x90BF1D91U, 0x1DB71064U,
	    0x6AB020F2U, 0xF3B97148U, 0x84Be41DeU, 0x1ADAD47DU, 0x6DDDe4eBU, 0xF4D4B551U, 0x83D385C7U, 0x136C9856U, 0x646BA8C0U, 0xFD62F97AU,
	    0x8A65C9eCU, 0x14015C4FU, 0x63066CD9U, 0xFA0F3D63U, 0x8D080DF5U, 0x3B6e20C8U, 0x4C69105eU, 0xD56041e4U, 0xA2677172U, 0x3C03e4D1U,
	    0x4B04D447U, 0xD20D85FDU, 0xA50AB56BU, 0x35B5A8FAU, 0x42B2986CU, 0xDBBBC9D6U, 0xACBCF940U, 0x32D86Ce3U, 0x45DF5C75U, 0xDCD60DCFU,
	    0xABD13D59U, 0x26D930ACU, 0x51De003AU, 0xC8D75180U, 0xBFD06116U, 0x21B4F4B5U, 0x56B3C423U, 0xCFBA9599U, 0xB8BDA50FU, 0x2802B89eU,
	    0x5F058808U, 0xC60CD9B2U, 0xB10Be924U, 0x2F6F7C87U, 0x58684C11U, 0xC1611DABU, 0xB6662D3DU, 0x76DC4190U, 0x01DB7106U, 0x98D220BCU,
	    0xeFD5102AU, 0x71B18589U, 0x06B6B51FU, 0x9FBFe4A5U, 0xe8B8D433U, 0x7807C9A2U, 0x0F00F934U, 0x9609A88eU, 0xe10e9818U, 0x7F6A0DBBU,
	    0x086D3D2DU, 0x91646C97U, 0xe6635C01U, 0x6B6B51F4U, 0x1C6C6162U, 0x856530D8U, 0xF262004eU, 0x6C0695eDU, 0x1B01A57BU, 0x8208F4C1U,
	    0xF50FC457U, 0x65B0D9C6U, 0x12B7e950U, 0x8BBeB8eAU, 0xFCB9887CU, 0x62DD1DDFU, 0x15DA2D49U, 0x8CD37CF3U, 0xFBD44C65U, 0x4DB26158U,
	    0x3AB551CeU, 0xA3BC0074U, 0xD4BB30e2U, 0x4ADFA541U, 0x3DD895D7U, 0xA4D1C46DU, 0xD3D6F4FBU, 0x4369e96AU, 0x346eD9FCU, 0xAD678846U,
	    0xDA60B8D0U, 0x44042D73U, 0x33031De5U, 0xAA0A4C5FU, 0xDD0D7CC9U, 0x5005713CU, 0x270241AAU, 0xBe0B1010U, 0xC90C2086U, 0x5768B525U,
	    0x206F85B3U, 0xB966D409U, 0xCe61e49FU, 0x5eDeF90eU, 0x29D9C998U, 0xB0D09822U, 0xC7D7A8B4U, 0x59B33D17U, 0x2eB40D81U, 0xB7BD5C3BU,
	    0xC0BA6CADU, 0xeDB88320U, 0x9ABFB3B6U, 0x03B6e20CU, 0x74B1D29AU, 0xeAD54739U, 0x9DD277AFU, 0x04DB2615U, 0x73DC1683U, 0xe3630B12U,
	    0x94643B84U, 0x0D6D6A3eU, 0x7A6A5AA8U, 0xe40eCF0BU, 0x9309FF9DU, 0x0A00Ae27U, 0x7D079eB1U, 0xF00F9344U, 0x8708A3D2U, 0x1e01F268U,
	    0x6906C2FeU, 0xF762575DU, 0x806567CBU, 0x196C3671U, 0x6e6B06e7U, 0xFeD41B76U, 0x89D32Be0U, 0x10DA7A5AU, 0x67DD4ACCU, 0xF9B9DF6FU,
	    0x8eBeeFF9U, 0x17B7Be43U, 0x60B08eD5U, 0xD6D6A3e8U, 0xA1D1937eU, 0x38D8C2C4U, 0x4FDFF252U, 0xD1BB67F1U, 0xA6BC5767U, 0x3FB506DDU,
	    0x48B2364BU, 0xD80D2BDAU, 0xAF0A1B4CU, 0x36034AF6U, 0x41047A60U, 0xDF60eFC3U, 0xA867DF55U, 0x316e8eeFU, 0x4669Be79U, 0xCB61B38CU,
	    0xBC66831AU, 0x256FD2A0U, 0x5268e236U, 0xCC0C7795U, 0xBB0B4703U, 0x220216B9U, 0x5505262FU, 0xC5BA3BBeU, 0xB2BD0B28U, 0x2BB45A92U,
	    0x5CB36A04U, 0xC2D7FFA7U, 0xB5D0CF31U, 0x2CD99e8BU, 0x5BDeAe1DU, 0x9B64C2B0U, 0xeC63F226U, 0x756AA39CU, 0x026D930AU, 0x9C0906A9U,
	    0xeB0e363FU, 0x72076785U, 0x05005713U, 0x95BF4A82U, 0xe2B87A14U, 0x7BB12BAeU, 0x0CB61B38U, 0x92D28e9BU, 0xe5D5Be0DU, 0x7CDCeFB7U,
	    0x0BDBDF21U, 0x86D3D2D4U, 0xF1D4e242U, 0x68DDB3F8U, 0x1FDA836eU, 0x81Be16CDU, 0xF6B9265BU, 0x6FB077e1U, 0x18B74777U, 0x88085Ae6U,
	    0xFF0F6A70U, 0x66063BCAU, 0x11010B5CU, 0x8F659eFFU, 0xF862Ae69U, 0x616BFFD3U, 0x166CCF45U, 0xA00Ae278U, 0xD70DD2eeU, 0x4e048354U,
	    0x3903B3C2U, 0xA7672661U, 0xD06016F7U, 0x4969474DU, 0x3e6e77DBU, 0xAeD16A4AU, 0xD9D65ADCU, 0x40DF0B66U, 0x37D83BF0U, 0xA9BCAe53U,
	    0xDeBB9eC5U, 0x47B2CF7FU, 0x30B5FFe9U, 0xBDBDF21CU, 0xCABAC28AU, 0x53B39330U, 0x24B4A3A6U, 0xBAD03605U, 0xCDD70693U, 0x54De5729U,
	    0x23D967BFU, 0xB3667A2eU, 0xC4614AB8U, 0x5D681B02U, 0x2A6F2B94U, 0xB40BBe37U, 0xC30C8eA1U, 0x5A05DF1BU, 0x2D02eF8DL};

	crc = crc ^ 0xFFFFFFFFU;
	for (size_t i = 0; i != size; ++i) {
		crc = crc_table[(crc ^ data[i]) & 0xFFU] ^ (crc >> 8U);
	}
	return crc ^ 0xFFFFFFFFU;
}

#if USE_HW_INSTRUCTIONS
uint32_t crc32c(uint32_t crc, const uint8_t *data, size_t size) {
	crc = crc ^ 0xFFFFFFFFU;

	void *next_aligned = const_cast<void *>(reinterpret_cast<const void *>(data));
	if (std::align(alignof(uint64_t), sizeof(uint64_t), next_aligned, size)) {
		// There is such a pointer inside data:size that aligned uint64_t would fit
		while (data != next_aligned) {
			crc = _mm_crc32_u8(crc, *data);
			data++;
			size--;
		}
		uint64_t crc64 = crc;
		while (size >= sizeof(uint64_t)) {
			crc64 = _mm_crc32_u64(crc64, *reinterpret_cast<const uint64_t *>(data));
			data += sizeof(uint64_t);
			size -= sizeof(uint64_t);
		}
		crc = crc64;
	}
	while (size > 0) {
		crc = _mm_crc32_u8(crc, *data);
		data++;
		size--;
	}
	return crc ^ 0xFFFFFFFFU;
}
#else
uint32_t crc32c(uint32_t crc, const uint8_t *data, size_t size) {
	static const uint32_t crc_table[256] = {0x00000000, 0xf26b8303, 0xe13b70f7, 0x1350f3f4, 0xc79a971f, 0x35f1141c, 0x26a1e7e8,
	    0xd4ca64eb, 0x8ad958cf, 0x78b2dbcc, 0x6be22838, 0x9989ab3b, 0x4d43cfd0, 0xbf284cd3, 0xac78bf27, 0x5e133c24, 0x105ec76f,
	    0xe235446c, 0xf165b798, 0x030e349b, 0xd7c45070, 0x25afd373, 0x36ff2087, 0xc494a384, 0x9a879fa0, 0x68ec1ca3, 0x7bbcef57,
	    0x89d76c54, 0x5d1d08bf, 0xaf768bbc, 0xbc267848, 0x4e4dfb4b, 0x20bd8ede, 0xd2d60ddd, 0xc186fe29, 0x33ed7d2a, 0xe72719c1,
	    0x154c9ac2, 0x061c6936, 0xf477ea35, 0xaa64d611, 0x580f5512, 0x4b5fa6e6, 0xb93425e5, 0x6dfe410e, 0x9f95c20d, 0x8cc531f9,
	    0x7eaeb2fa, 0x30e349b1, 0xc288cab2, 0xd1d83946, 0x23b3ba45, 0xf779deae, 0x05125dad, 0x1642ae59, 0xe4292d5a, 0xba3a117e,
	    0x4851927d, 0x5b016189, 0xa96ae28a, 0x7da08661, 0x8fcb0562, 0x9c9bf696, 0x6ef07595, 0x417b1dbc, 0xb3109ebf, 0xa0406d4b,
	    0x522bee48, 0x86e18aa3, 0x748a09a0, 0x67dafa54, 0x95b17957, 0xcba24573, 0x39c9c670, 0x2a993584, 0xd8f2b687, 0x0c38d26c,
	    0xfe53516f, 0xed03a29b, 0x1f682198, 0x5125dad3, 0xa34e59d0, 0xb01eaa24, 0x42752927, 0x96bf4dcc, 0x64d4cecf, 0x77843d3b,
	    0x85efbe38, 0xdbfc821c, 0x2997011f, 0x3ac7f2eb, 0xc8ac71e8, 0x1c661503, 0xee0d9600, 0xfd5d65f4, 0x0f36e6f7, 0x61c69362,
	    0x93ad1061, 0x80fde395, 0x72966096, 0xa65c047d, 0x5437877e, 0x4767748a, 0xb50cf789, 0xeb1fcbad, 0x197448ae, 0x0a24bb5a,
	    0xf84f3859, 0x2c855cb2, 0xdeeedfb1, 0xcdbe2c45, 0x3fd5af46, 0x7198540d, 0x83f3d70e, 0x90a324fa, 0x62c8a7f9, 0xb602c312,
	    0x44694011, 0x5739b3e5, 0xa55230e6, 0xfb410cc2, 0x092a8fc1, 0x1a7a7c35, 0xe811ff36, 0x3cdb9bdd, 0xceb018de, 0xdde0eb2a,
	    0x2f8b6829, 0x82f63b78, 0x709db87b, 0x63cd4b8f, 0x91a6c88c, 0x456cac67, 0xb7072f64, 0xa457dc90, 0x563c5f93, 0x082f63b7,
	    0xfa44e0b4, 0xe9141340, 0x1b7f9043, 0xcfb5f4a8, 0x3dde77ab, 0x2e8e845f, 0xdce5075c, 0x92a8fc17, 0x60c37f14, 0x73938ce0,
	    0x81f80fe3, 0x55326b08, 0xa759e80b, 0xb4091bff, 0x466298fc, 0x1871a4d8, 0xea1a27db, 0xf94ad42f, 0x0b21572c, 0xdfeb33c7,
	    0x2d80b0c4, 0x3ed04330, 0xccbbc033, 0xa24bb5a6, 0x502036a5, 0x4370c551, 0xb11b4652, 0x65d122b9, 0x97baa1ba, 0x84ea524e,
	    0x7681d14d, 0x2892ed69, 0xdaf96e6a, 0xc9a99d9e, 0x3bc21e9d, 0xef087a76, 0x1d63f975, 0x0e330a81, 0xfc588982, 0xb21572c9,
	    0x407ef1ca, 0x532e023e, 0xa145813d, 0x758fe5d6, 0x87e466d5, 0x94b49521, 0x66df1622, 0x38cc2a06, 0xcaa7a905, 0xd9f75af1,
	    0x2b9cd9f2, 0xff56bd19, 0x0d3d3e1a, 0x1e6dcdee, 0xec064eed, 0xc38d26c4, 0x31e6a5c7, 0x22b65633, 0xd0ddd530, 0x0417b1db,
	    0xf67c32d8, 0xe52cc12c, 0x1747422f, 0x49547e0b, 0xbb3ffd08, 0xa86f0efc, 0x5a048dff, 0x8ecee914, 0x7ca56a17, 0x6ff599e3,
	    0x9d9e1ae0, 0xd3d3e1ab, 0x21b862a8, 0x32e8915c, 0xc083125f, 0x144976b4, 0xe622f5b7, 0xf5720643, 0x07198540, 0x590ab964,
	    0xab613a67, 0xb831c993, 0x4a5a4a90, 0x9e902e7b, 0x6cfbad78, 0x7fab5e8c, 0x8dc0dd8f, 0xe330a81a, 0x115b2b19, 0x020bd8ed,
	    0xf0605bee, 0x24aa3f05, 0xd6c1bc06, 0xc5914ff2, 0x37faccf1, 0x69e9f0d5, 0x9b8273d6, 0x88d28022, 0x7ab90321, 0xae7367ca,
	    0x5c18e4c9, 0x4f48173d, 0xbd23943e, 0xf36e6f75, 0x0105ec76, 0x12551f82, 0xe03e9c81, 0x34f4f86a, 0xc69f7b69, 0xd5cf889d,
	    0x27a40b9e, 0x79b737ba, 0x8bdcb4b9, 0x988c474d, 0x6ae7c44e, 0xbe2da0a5, 0x4c4623a6, 0x5f16d052, 0xad7d5351};

	crc = crc ^ 0xFFFFFFFFU;
	for (size_t i = 0; i != size; ++i) {
		crc = crc_table[(crc ^ data[i]) & 0xFFU] ^ (crc >> 8U);
	}
	return crc ^ 0xFFFFFFFFU;
}
#endif

}  // namespace crab
